{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"react\");\n\nvar core_1 = require(\"@aws-amplify/core\");\n\nvar storage_1 = require(\"@aws-amplify/storage\");\n\nvar AmplifyTheme_1 = require(\"../AmplifyTheme\");\n\nvar TextPicker_1 = require(\"../Widget/TextPicker\");\n\nvar Common_1 = require(\"./Common\");\n\nvar logger = new core_1.ConsoleLogger('Storage.S3Text');\n\nvar S3Text =\n/** @class */\nfunction (_super) {\n  __extends(S3Text, _super);\n\n  function S3Text(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._isMounted = false;\n    _this.handleOnLoad = _this.handleOnLoad.bind(_this);\n    _this.handleOnError = _this.handleOnError.bind(_this);\n    _this.handlePick = _this.handlePick.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    var text = props.text,\n        textKey = props.textKey;\n    _this.state = {\n      text: text || '',\n      textKey: textKey || ''\n    };\n    return _this;\n  }\n\n  S3Text.prototype.getText = function (key, level, track, identityId) {\n    var _this = this;\n\n    if (!storage_1.default || typeof storage_1.default.get !== 'function') {\n      throw new Error('No Storage module found, please ensure @aws-amplify/storage is imported');\n    }\n\n    storage_1.default.get(key, {\n      download: true,\n      level: level ? level : 'public',\n      track: track,\n      identityId: identityId\n    }).then(function (data) {\n      logger.debug(data);\n      var text = data.Body.toString('utf8');\n\n      if (_this._isMounted) {\n        _this.setState({\n          text: text\n        });\n      }\n\n      _this.handleOnLoad(text);\n    }).catch(function (err) {\n      logger.debug(err);\n\n      _this.handleOnError(err);\n    });\n  };\n\n  S3Text.prototype.load = function () {\n    var _a = this.props,\n        path = _a.path,\n        textKey = _a.textKey,\n        body = _a.body,\n        contentType = _a.contentType,\n        level = _a.level,\n        track = _a.track,\n        identityId = _a.identityId;\n\n    if (!textKey && !path) {\n      logger.debug('empty textKey and path');\n      return;\n    }\n\n    var that = this;\n    var key = textKey || path;\n    logger.debug('loading ' + key + '...');\n\n    if (body) {\n      var type = contentType || 'text/*';\n\n      if (!storage_1.default || typeof storage_1.default.put !== 'function') {\n        throw new Error('No Storage module found, please ensure @aws-amplify/storage is imported');\n      }\n\n      var ret = storage_1.default.put(key, body, {\n        contentType: type,\n        level: level ? level : 'public',\n        track: track\n      });\n      ret.then(function (data) {\n        logger.debug(data);\n        that.getText(key, level, track, identityId);\n      }).catch(function (err) {\n        return logger.debug(err);\n      });\n    } else {\n      that.getText(key, level, track, identityId);\n    }\n  };\n\n  S3Text.prototype.handleOnLoad = function (text) {\n    var onLoad = this.props.onLoad;\n\n    if (onLoad) {\n      onLoad(text);\n    }\n  };\n\n  S3Text.prototype.handleOnError = function (err) {\n    var onError = this.props.onError;\n\n    if (onError) {\n      onError(err);\n    }\n  };\n\n  S3Text.prototype.handlePick = function (data) {\n    var that = this;\n    var path = this.props.path || '';\n    var _a = this.props,\n        textKey = _a.textKey,\n        level = _a.level,\n        fileToKey = _a.fileToKey,\n        track = _a.track,\n        identityId = _a.identityId;\n    var file = data.file,\n        name = data.name,\n        size = data.size,\n        type = data.type;\n    var key = textKey || path + Common_1.calcKey(data, fileToKey);\n\n    if (!storage_1.default || typeof storage_1.default.put !== 'function') {\n      throw new Error('No Storage module found, please ensure @aws-amplify/storage is imported');\n    }\n\n    storage_1.default.put(key, file, {\n      level: level ? level : 'public',\n      contentType: type,\n      track: track\n    }).then(function (data) {\n      logger.debug('handle pick data', data);\n      that.getText(key, level, track, identityId);\n    }).catch(function (err) {\n      return logger.debug('handle pick error', err);\n    });\n  };\n\n  S3Text.prototype.handleClick = function (evt) {\n    var onClick = this.props.onClick;\n\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n\n  S3Text.prototype.componentDidMount = function () {\n    this._isMounted = true;\n    this.load();\n  };\n\n  S3Text.prototype.componentWillUnmount = function () {\n    this._isMounted = false;\n  };\n\n  S3Text.prototype.componentDidUpdate = function (prevProps) {\n    var update = prevProps.path !== this.props.path || prevProps.textKey !== this.props.textKey || prevProps.body !== this.props.body;\n\n    if (update) {\n      this.load();\n    }\n  };\n\n  S3Text.prototype.textEl = function (text, theme) {\n    if (!text) {\n      return null;\n    }\n\n    var selected = this.props.selected;\n    var containerStyle = {\n      position: 'relative'\n    };\n    return React.createElement(\"div\", {\n      style: containerStyle,\n      onClick: this.handleClick\n    }, React.createElement(\"pre\", {\n      style: theme.pre\n    }, text), React.createElement(\"div\", {\n      style: selected ? theme.overlaySelected : theme.overlay\n    }));\n  };\n\n  S3Text.prototype.render = function () {\n    var _a = this.props,\n        hidden = _a.hidden,\n        style = _a.style,\n        picker = _a.picker,\n        translate = _a.translate,\n        textKey = _a.textKey;\n    var text = this.state.text;\n\n    if (translate) {\n      text = typeof translate === 'string' ? translate : translate({\n        type: 'text',\n        key: textKey,\n        content: text\n      });\n    }\n\n    if (!text && !picker) {\n      return null;\n    }\n\n    var theme = this.props.theme || AmplifyTheme_1.default;\n    var textStyle = hidden ? AmplifyTheme_1.default.hidden : Object.assign({}, theme.text, style);\n    return React.createElement(\"div\", {\n      style: textStyle\n    }, textStyle ? this.textEl(text, theme) : null, picker ? React.createElement(\"div\", null, React.createElement(TextPicker_1.default, {\n      key: \"picker\",\n      onPick: this.handlePick,\n      theme: theme\n    })) : null);\n  };\n\n  return S3Text;\n}(react_1.Component);\n\nexports.default = S3Text;","map":null,"metadata":{},"sourceType":"script"}
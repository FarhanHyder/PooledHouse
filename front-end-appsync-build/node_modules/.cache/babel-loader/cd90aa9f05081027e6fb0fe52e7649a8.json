{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar core_1 = require(\"@aws-amplify/core\");\n\nvar auth_1 = require(\"@aws-amplify/auth\");\n\nvar AuthPiece_1 = require(\"./AuthPiece\");\n\nvar Amplify_UI_Components_React_1 = require(\"../Amplify-UI/Amplify-UI-Components-React\");\n\nvar country_dial_codes_js_1 = require(\"./common/country-dial-codes.js\");\n\nvar default_sign_in_fields_1 = require(\"./common/default-sign-in-fields\");\n\nvar logger = new core_1.ConsoleLogger('SignUp');\n\nvar SignUp =\n/** @class */\nfunction (_super) {\n  __extends(SignUp, _super);\n\n  function SignUp(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._validAuthStates = ['signUp'];\n    _this.signUp = _this.signUp.bind(_this);\n    _this.sortFields = _this.sortFields.bind(_this);\n    _this.getDefaultDialCode = _this.getDefaultDialCode.bind(_this);\n    _this.checkCustomSignUpFields = _this.checkCustomSignUpFields.bind(_this);\n    _this.defaultSignUpFields = default_sign_in_fields_1.default;\n    _this.needPrefix = _this.needPrefix.bind(_this);\n    _this.header = _this.props && _this.props.signUpConfig && _this.props.signUpConfig.header ? _this.props.signUpConfig.header : 'Create a new account';\n    return _this;\n  }\n\n  SignUp.prototype.validate = function () {\n    var _this = this;\n\n    var invalids = [];\n    this.signUpFields.map(function (el) {\n      if (el.key !== 'phone_number') {\n        if (el.required && !_this.inputs[el.key]) {\n          el.invalid = true;\n          invalids.push(el.label);\n        } else {\n          el.invalid = false;\n        }\n      } else {\n        if (el.required && (!_this.inputs.dial_code || !_this.inputs.phone_line_number)) {\n          el.invalid = true;\n          invalids.push(el.label);\n        } else {\n          el.invalid = false;\n        }\n      }\n    });\n    return invalids;\n  };\n\n  SignUp.prototype.sortFields = function () {\n    var _this = this;\n\n    if (this.props.signUpConfig && this.props.signUpConfig.hiddenDefaults && this.props.signUpConfig.hiddenDefaults.length > 0) {\n      this.defaultSignUpFields = this.defaultSignUpFields.filter(function (d) {\n        return !_this.props.signUpConfig.hiddenDefaults.includes(d.key);\n      });\n    }\n\n    if (this.checkCustomSignUpFields()) {\n      if (!this.props.signUpConfig || !this.props.signUpConfig.hideAllDefaults) {\n        // see if fields passed to component should override defaults\n        this.defaultSignUpFields.forEach(function (f, i) {\n          var matchKey = _this.signUpFields.findIndex(function (d) {\n            return d.key === f.key;\n          });\n\n          if (matchKey === -1) {\n            _this.signUpFields.push(f);\n          }\n        });\n      }\n      /*\n        sort fields based on following rules:\n        1. Fields with displayOrder are sorted before those without displayOrder\n        2. Fields with conflicting displayOrder are sorted alphabetically by key\n        3. Fields without displayOrder are sorted alphabetically by key\n      */\n\n\n      this.signUpFields.sort(function (a, b) {\n        if (a.displayOrder && b.displayOrder) {\n          if (a.displayOrder < b.displayOrder) {\n            return -1;\n          } else if (a.displayOrder > b.displayOrder) {\n            return 1;\n          } else {\n            if (a.key < b.key) {\n              return -1;\n            } else {\n              return 1;\n            }\n          }\n        } else if (!a.displayOrder && b.displayOrder) {\n          return 1;\n        } else if (a.displayOrder && !b.displayOrder) {\n          return -1;\n        } else if (!a.displayOrder && !b.displayOrder) {\n          if (a.key < b.key) {\n            return -1;\n          } else {\n            return 1;\n          }\n        }\n      });\n    } else {\n      this.signUpFields = this.defaultSignUpFields;\n    }\n  };\n\n  SignUp.prototype.needPrefix = function (key) {\n    var field = this.signUpFields.find(function (e) {\n      return e.key === key;\n    });\n\n    if (key.indexOf('custom:') !== 0) {\n      return field.custom;\n    } else if (key.indexOf('custom:') === 0 && field.custom === false) {\n      logger.warn('Custom prefix prepended to key but custom field flag is set to false; retaining manually entered prefix');\n    }\n\n    return null;\n  };\n\n  SignUp.prototype.getDefaultDialCode = function () {\n    return this.props.signUpConfig && this.props.signUpConfig.defaultCountryCode && country_dial_codes_js_1.default.indexOf(\"+\" + this.props.signUpConfig.defaultCountryCode) !== '-1' ? \"+\" + this.props.signUpConfig.defaultCountryCode : \"+1\";\n  };\n\n  SignUp.prototype.checkCustomSignUpFields = function () {\n    return this.props.signUpConfig && this.props.signUpConfig.signUpFields && this.props.signUpConfig.signUpFields.length > 0;\n  };\n\n  SignUp.prototype.signUp = function () {\n    var _this = this;\n\n    if (!this.inputs.dial_code) {\n      this.inputs.dial_code = this.getDefaultDialCode();\n    }\n\n    var validation = this.validate();\n\n    if (validation && validation.length > 0) {\n      return this.error(\"The following fields need to be filled out: \" + validation.join(', '));\n    }\n\n    if (!auth_1.default || typeof auth_1.default.signUp !== 'function') {\n      throw new Error('No Auth module found, please ensure @aws-amplify/auth is imported');\n    }\n\n    var signup_info = {\n      username: this.inputs.username,\n      password: this.inputs.password,\n      attributes: {}\n    };\n    var inputKeys = Object.keys(this.inputs);\n    var inputVals = Object.values(this.inputs);\n    inputKeys.forEach(function (key, index) {\n      if (!['username', 'password', 'checkedValue', 'dial_code'].includes(key)) {\n        if (key !== 'phone_line_number' && key !== 'dial_code' && key !== 'error') {\n          var newKey = \"\" + (_this.needPrefix(key) ? 'custom:' : '') + key;\n          signup_info.attributes[newKey] = inputVals[index];\n        } else if (inputVals[index]) {\n          signup_info.attributes['phone_number'] = \"\" + _this.inputs.dial_code + _this.inputs.phone_line_number.replace(/[-()]/g, '');\n        }\n      }\n    });\n    auth_1.default.signUp(signup_info).then(function (data) {\n      _this.changeState('confirmSignUp', data.user.username);\n    }).catch(function (err) {\n      return _this.error(err);\n    });\n  };\n\n  SignUp.prototype.showComponent = function (theme) {\n    var _this = this;\n\n    var hide = this.props.hide;\n\n    if (hide && hide.includes(SignUp)) {\n      return null;\n    }\n\n    if (this.checkCustomSignUpFields()) {\n      this.signUpFields = this.props.signUpConfig.signUpFields;\n    }\n\n    this.sortFields();\n    return React.createElement(Amplify_UI_Components_React_1.FormSection, {\n      theme: theme\n    }, React.createElement(Amplify_UI_Components_React_1.SectionHeader, {\n      theme: theme\n    }, core_1.I18n.get(this.header)), React.createElement(Amplify_UI_Components_React_1.SectionBody, {\n      theme: theme\n    }, this.signUpFields.map(function (field) {\n      return field.key !== 'phone_number' ? React.createElement(Amplify_UI_Components_React_1.FormField, {\n        theme: theme,\n        key: field.key\n      }, field.required ? React.createElement(Amplify_UI_Components_React_1.InputLabel, {\n        theme: theme\n      }, core_1.I18n.get(field.label), \" *\") : React.createElement(Amplify_UI_Components_React_1.InputLabel, {\n        theme: theme\n      }, core_1.I18n.get(field.label)), React.createElement(Amplify_UI_Components_React_1.Input, {\n        autoFocus: _this.signUpFields.findIndex(function (f) {\n          return f.key === field.key;\n        }) === 0 ? true : false,\n        placeholder: core_1.I18n.get(field.placeholder),\n        theme: theme,\n        type: field.type,\n        name: field.key,\n        key: field.key,\n        onChange: _this.handleInputChange\n      })) : React.createElement(Amplify_UI_Components_React_1.FormField, {\n        theme: theme,\n        key: \"phone_number\"\n      }, field.required ? React.createElement(Amplify_UI_Components_React_1.InputLabel, {\n        theme: theme\n      }, core_1.I18n.get(field.label), \" *\") : React.createElement(Amplify_UI_Components_React_1.InputLabel, {\n        theme: theme\n      }, core_1.I18n.get(field.label)), React.createElement(Amplify_UI_Components_React_1.SelectInput, {\n        theme: theme\n      }, React.createElement(\"select\", {\n        name: \"dial_code\",\n        defaultValue: _this.getDefaultDialCode(),\n        onChange: _this.handleInputChange\n      }, country_dial_codes_js_1.default.map(function (dialCode) {\n        return React.createElement(\"option\", {\n          key: dialCode,\n          value: dialCode\n        }, dialCode);\n      })), React.createElement(Amplify_UI_Components_React_1.Input, {\n        placeholder: core_1.I18n.get(field.placeholder),\n        theme: theme,\n        type: \"tel\",\n        id: \"phone_line_number\",\n        key: \"phone_line_number\",\n        name: \"phone_line_number\",\n        onChange: _this.handleInputChange\n      })));\n    })), React.createElement(Amplify_UI_Components_React_1.SectionFooter, {\n      theme: theme\n    }, React.createElement(Amplify_UI_Components_React_1.SectionFooterPrimaryContent, {\n      theme: theme\n    }, React.createElement(Amplify_UI_Components_React_1.Button, {\n      onClick: this.signUp,\n      theme: theme\n    }, core_1.I18n.get('Create Account'))), React.createElement(Amplify_UI_Components_React_1.SectionFooterSecondaryContent, {\n      theme: theme\n    }, core_1.I18n.get('Have an account? '), React.createElement(Amplify_UI_Components_React_1.Link, {\n      theme: theme,\n      onClick: function onClick() {\n        return _this.changeState('signIn');\n      }\n    }, core_1.I18n.get('Sign in')))));\n  };\n\n  return SignUp;\n}(AuthPiece_1.default);\n\nexports.default = SignUp;","map":null,"metadata":{},"sourceType":"script"}
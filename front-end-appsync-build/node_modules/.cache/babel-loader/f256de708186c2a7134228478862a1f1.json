{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types'); // qr.js doesn't handle error level of zero (M) so we need to do it right,\n// thus the deep require.\n\n\nvar QRCodeImpl = require('qr.js/lib/QRCode');\n\nvar ErrorCorrectLevel = require('qr.js/lib/ErrorCorrectLevel');\n\nfunction getBackingStorePixelRatio(ctx) {\n  return (// $FlowFixMe\n    ctx.webkitBackingStorePixelRatio || // $FlowFixMe\n    ctx.mozBackingStorePixelRatio || // $FlowFixMe\n    ctx.msBackingStorePixelRatio || // $FlowFixMe\n    ctx.oBackingStorePixelRatio || // $FlowFixMe\n    ctx.backingStorePixelRatio || 1\n  );\n} // Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.\n// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more\n// detection and not resort to byte-mode if possible, but we're trading off\n// a smaller library for a smaller amount of data we can potentially encode.\n// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n\n\nfunction convertStr(str) {\n  var out = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n\n    if (charcode < 0x0080) {\n      out += String.fromCharCode(charcode);\n    } else if (charcode < 0x0800) {\n      out += String.fromCharCode(0xc0 | charcode >> 6);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      out += String.fromCharCode(0xe0 | charcode >> 12);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else {\n      // This is a surrogate pair, so we'll reconsitute the pieces and work\n      // from that\n      i++;\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      out += String.fromCharCode(0xf0 | charcode >> 18);\n      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    }\n  }\n\n  return out;\n}\n\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: 'L',\n  bgColor: '#FFFFFF',\n  fgColor: '#000000'\n};\nvar PROP_TYPES = {\n  value: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  level: PropTypes.oneOf(['L', 'M', 'Q', 'H']),\n  bgColor: PropTypes.string,\n  fgColor: PropTypes.string\n};\n\nvar QRCodeCanvas =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QRCodeCanvas, _React$Component);\n\n  function QRCodeCanvas() {\n    var _ref;\n\n    var _temp, _this;\n\n    _classCallCheck(this, QRCodeCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = QRCodeCanvas.__proto__ || Object.getPrototypeOf(QRCodeCanvas)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), \"_canvas\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: void 0\n    }), _temp));\n  }\n\n  _createClass(QRCodeCanvas, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _this2 = this;\n\n      return Object.keys(QRCodeCanvas.propTypes).some(function (k) {\n        return _this2.props[k] !== nextProps[k];\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _props = this.props,\n          value = _props.value,\n          size = _props.size,\n          level = _props.level,\n          bgColor = _props.bgColor,\n          fgColor = _props.fgColor; // We'll use type===-1 to force QRCode to automatically pick the best type\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n\n      if (this._canvas != null) {\n        var canvas = this._canvas;\n        var ctx = canvas.getContext('2d');\n\n        if (!ctx) {\n          return;\n        }\n\n        var cells = qrcode.modules;\n\n        if (cells === null) {\n          return;\n        }\n\n        var tileW = size / cells.length;\n        var tileH = size / cells.length;\n        var scale = (window.devicePixelRatio || 1) / getBackingStorePixelRatio(ctx);\n        canvas.height = canvas.width = size * scale;\n        ctx.scale(scale, scale);\n        cells.forEach(function (row, rdx) {\n          row.forEach(function (cell, cdx) {\n            ctx && (ctx.fillStyle = cell ? fgColor : bgColor);\n            var w = Math.ceil((cdx + 1) * tileW) - Math.floor(cdx * tileW);\n            var h = Math.ceil((rdx + 1) * tileH) - Math.floor(rdx * tileH);\n            ctx && ctx.fillRect(Math.round(cdx * tileW), Math.round(rdx * tileH), w, h);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          value = _props2.value,\n          size = _props2.size,\n          level = _props2.level,\n          bgColor = _props2.bgColor,\n          fgColor = _props2.fgColor,\n          style = _props2.style,\n          otherProps = _objectWithoutProperties(_props2, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"style\"]);\n\n      var canvasStyle = _extends({\n        height: size,\n        width: size\n      }, style);\n\n      return React.createElement(\"canvas\", _extends({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: function ref(_ref2) {\n          return _this3._canvas = _ref2;\n        }\n      }, otherProps));\n    }\n  }]);\n\n  return QRCodeCanvas;\n}(React.Component);\n\nObject.defineProperty(QRCodeCanvas, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: DEFAULT_PROPS\n});\nObject.defineProperty(QRCodeCanvas, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: PROP_TYPES\n});\n\nvar QRCodeSVG =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(QRCodeSVG, _React$Component2);\n\n  function QRCodeSVG() {\n    _classCallCheck(this, QRCodeSVG);\n\n    return _possibleConstructorReturn(this, (QRCodeSVG.__proto__ || Object.getPrototypeOf(QRCodeSVG)).apply(this, arguments));\n  }\n\n  _createClass(QRCodeSVG, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _this4 = this;\n\n      return Object.keys(QRCodeCanvas.propTypes).some(function (k) {\n        return _this4.props[k] !== nextProps[k];\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          value = _props3.value,\n          size = _props3.size,\n          level = _props3.level,\n          bgColor = _props3.bgColor,\n          fgColor = _props3.fgColor,\n          otherProps = _objectWithoutProperties(_props3, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\"]); // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return;\n      } // Drawing strategy: instead of a rect per module, we're going to create a\n      // single path for the dark modules and layer that on top of a light rect,\n      // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n      // way faster than DOM ops.\n      // For level 1, 441 nodes -> 2\n      // For level 40, 31329 -> 2\n\n\n      var ops = [];\n      cells.forEach(function (row, y) {\n        var lastIsDark = false;\n        var start = null;\n        row.forEach(function (cell, x) {\n          if (!cell && start !== null) {\n            // M0 0h7v1H0z injects the space with the move and dropd the comma,\n            // saving a char per operation\n            ops.push(\"M\".concat(start, \" \").concat(y, \"h\").concat(x - start, \"v1H\").concat(start, \"z\"));\n            start = null;\n            return;\n          } // end of row, clean up or skip\n\n\n          if (x === row.length - 1) {\n            if (!cell) {\n              // We would have closed the op above already so this can only mean\n              // 2+ light modules in a row.\n              return;\n            }\n\n            if (start === null) {\n              // Just a single dark module.\n              ops.push(\"M\".concat(x, \",\").concat(y, \" h1v1H\").concat(x, \"z\"));\n            } else {\n              // Otherwise finish the current line.\n              ops.push(\"M\".concat(start, \",\").concat(y, \" h\").concat(x + 1 - start, \"v1H\").concat(start, \"z\"));\n            }\n\n            return;\n          }\n\n          if (cell && start === null) {\n            start = x;\n          }\n        });\n      });\n      return React.createElement(\"svg\", _extends({\n        shapeRendering: \"crispEdges\",\n        height: size,\n        width: size,\n        viewBox: \"0 0 \".concat(cells.length, \" \").concat(cells.length)\n      }, otherProps), React.createElement(\"path\", {\n        fill: bgColor,\n        d: \"M0,0 h\".concat(cells.length, \"v\").concat(cells.length, \"H0z\")\n      }), React.createElement(\"path\", {\n        fill: fgColor,\n        d: ops.join('')\n      }));\n    }\n  }]);\n\n  return QRCodeSVG;\n}(React.Component);\n\nObject.defineProperty(QRCodeSVG, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: DEFAULT_PROPS\n});\nObject.defineProperty(QRCodeSVG, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: PROP_TYPES\n});\n\nvar QRCode = function QRCode(props) {\n  var renderAs = props.renderAs,\n      otherProps = _objectWithoutProperties(props, [\"renderAs\"]);\n\n  var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;\n  return React.createElement(Component, otherProps);\n};\n\nQRCode.defaultProps = _extends({\n  renderAs: 'canvas'\n}, DEFAULT_PROPS);\nmodule.exports = QRCode;","map":null,"metadata":{},"sourceType":"script"}